from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dicts import DishData
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.create_keyboard import create_keyboard


def start_menu() -> InlineKeyboardMarkup:

    reply_markup = create_keyboard(
        2,
        "ü•ó–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞", "ü•ô–ú–æ–∏ –±–ª—é–¥–∞",
        "üëÄ–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "‚öñ–†–∞—Å—á–∏—Ç–∞—Ç—å BMI",
        "üïó–ú–æ—è —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞", "‚åõ–†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å",
    )

    return reply_markup


def yes_or_no_user() -> InlineKeyboardMarkup:

    reply_markup = create_keyboard(
        1,
        user_yes_callback = "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        user_no_callback = "‚ùå–û—Ç–º–µ–Ω–∞",
    )

    return reply_markup


def yes_or_no_dish() -> InlineKeyboardMarkup:

    reply_markup = create_keyboard(
        1,
        dish_yes_callback = "‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
        dish_no_callback = "‚ùå–û—Ç–º–µ–Ω–∞",
    )

    return reply_markup


def gender_select() -> InlineKeyboardMarkup:

    reply_markup = create_keyboard(
        2,
        "‚ôÇ –ú—É–∂—Å–∫–æ–π ‚ôÇ",
        "‚ôÄ –ñ–µ–Ω—Å–∫–∏–π ‚ôÄ",
    )

    return reply_markup


def activity_select() -> InlineKeyboardMarkup:

    reply_markup = create_keyboard(
        1,
        "‚ö°‚ö°‚ö° –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ö°‚ö°‚ö°",
        "‚ö°‚ö° –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ö°‚ö°",
        "‚ö° –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ö°",
    )

    return reply_markup

def return_select() -> InlineKeyboardMarkup:

    reply_markup = create_keyboard(
        1,
        "üîô–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
    )

    return reply_markup

ITEMS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

def make_menu(dishes: List[DishData], page: int, selected: List[DishData]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE

    # –ö–Ω–æ–ø–∫–∏ –±–ª—é–¥
    for idx, dish in enumerate(dishes[start:end], start=start):
        checked = "‚úÖ" if dish in selected else ""
        text = f"{checked} {dish['name']}"
        callback = f"toggle:{idx}:{page}"
        kb.button(text=text, callback_data=callback)

    kb.adjust(2)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    nav_buttons = []

    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="<", callback_data=f"page:{page-1}"))

    if end < len(dishes):
        nav_buttons.append(InlineKeyboardButton(text=">", callback_data=f"page:{page+1}"))

    if nav_buttons:
        kb.row(*nav_buttons)

    kb.row(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm"))

    return kb.as_markup()


def delete_menu(dishes: List[DishData], page: int, selected: List[DishData]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE

    # –ö–Ω–æ–ø–∫–∏ –±–ª—é–¥
    for idx, dish in enumerate(dishes[start:end], start=start):
        checked = "‚ùå" if dish in selected else ""
        text = f"{checked} {dish['name']} - {dish['carbs']} —É–≥–ª, {dish["protein"]} –±–µ–ª, {dish['fats']} –∂–∏—Ä"
        callback = f"delete_toggle:{idx}:{page}"
        kb.button(text=text, callback_data=callback)

    kb.adjust(1)

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

    nav_buttons = []

    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="<", callback_data=f"delete_page:{page-1}"))

    if end < len(dishes):
        nav_buttons.append(InlineKeyboardButton(text=">", callback_data=f"delete_page:{page+1}"))

    if nav_buttons:
        kb.row(*nav_buttons)

    kb.row(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="delete_confirm"))

    return kb.as_markup()







# –≠–¢–û –î–õ–Ø –¢–ï–°–¢–ê
all_user_dishes = {
    1: "–ë–ª—é–¥–æ 1",
    2: "–ë–ª—é–¥–æ 2",
    3: "–ë–ª—é–¥–æ 3",
    4: "–ë–ª—é–¥–æ 4",
    5: "–ë–ª—é–¥–æ 5",
    6: "–ë–ª—é–¥–æ 6",
}

def pagination_keyboard(page = 1):

    middle_button = f"{page}/{len(all_user_dishes)/5}"

    if page == 1:
        return pagination_keyboard(middle_button, ">")
    elif page == len(all_user_dishes):
        return pagination_keyboard("<" ,middle_button)
    else:
        return pagination_keyboard("<", middle_button, ">")




if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard = start_menu()
    print(keyboard)  # –í—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏