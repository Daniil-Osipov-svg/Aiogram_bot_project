from aiogram import F, Router
from aiogram.types import CallbackQuery
from typing import cast
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from dicts import users, DishData, UserInfoData
from handlers.tdee_handlers import calculate_tdee
from keyboards.main_menu import start_menu, make_menu, return_select, delete_menu
from filters.filters import user_exists
from database.requests import add_user_info

# FSM –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –±–ª—é–¥–µ
class FSMFillDish(StatesGroup):
    dish_carbs = State()
    dish_protein = State()
    dish_fats = State()
    dish_name = State()

    end = State()

# FSM –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class FSMFillUser(StatesGroup):
    user_age = State()
    user_weight = State()
    user_height = State()
    user_gender = State()
    user_activity = State()

    end = State()

# FSM –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª—é–¥–∞—Ö
class FSMDietState(StatesGroup):
    selecting = State()

class FSMDeleteState(StatesGroup):
    deleting = State()

router = Router()

@router.callback_query(F.data == "‚öñ–†–∞—Å—á–∏—Ç–∞—Ç—å BMI")
async def give_advice(callback: CallbackQuery):
    uid = callback.from_user.id
    data = users.get(uid)
    if not data or not data['user_info']:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∫–æ–º–∞–Ω–¥–æ–π ¬´–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ¬ª.")
        return

    ui = data['user_info']
    # –†–∞—Å—á—ë—Ç BMI
    try:
        weight = float(ui['weight'])
        height = float(ui['height'])
        bmi = weight / ((height / 100) ** 2)
    except (KeyError, ValueError, ZeroDivisionError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–æ—Å—Ç–∞/–≤–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
        return

    # –†–∞—Å—á—ë—Ç TDEE
    tdee = calculate_tdee(ui)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ BMI
    if bmi < 18.5:
        status = "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å"
        recommendation = (
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ 10‚Äì20% –∑–∞ —Å—á—ë—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤ –∏ –±–µ–ª–∫–æ–≤, "
            "–¥–æ–±–∞–≤–∏—Ç—å 2‚Äì3 –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –∏ —É–¥–µ–ª–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Å–∏–ª–æ–≤—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –¥–ª—è –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã."
        )
    elif bmi < 25:
        status = "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å"
        recommendation = (
            "–í–∞—à –≤–µ—Å –≤ –Ω–æ—Ä–º–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. "
            "–ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É ‚Äî —Å–ª–µ–≥–∫–∞ —É–º–µ–Ω—å—à–∏—Ç–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ —á–∞—Å—Ç—å —É–≥–ª–µ–≤–æ–¥–æ–≤ –Ω–∞ –±–µ–ª–æ–∫."
        )
    else:
        status = "–∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å"
        recommendation = (
            "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π 10‚Äì15% –æ—Ç TDEE, —É–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—Ä–¥–∏–æ–Ω–∞–≥—Ä—É–∑–∫—É "
            "–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Ä—Ü–∏–π. –£–¥–µ–ª–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –±–µ–ª–∫–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –∏ –∫–ª–µ—Ç—á–∞—Ç–∫–µ."
        )

    text = (
        f"üìä *–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n\n"
        f"- BMI: {bmi:.1f} ({status})\n"
        f"- –°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π (TDEE): {tdee:.0f} –∫–∫–∞–ª\n\n"
        f"*–°–æ–≤–µ—Ç:* {recommendation}"
    )
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text(text=text, reply_markup=return_select(), parse_mode="Markdown")



# –£–¥–∞–ª–µ–Ω–∏–µ –±–ª—é–¥–∞

@router.callback_query(F.data == "ü•ô–ú–æ–∏ –±–ª—é–¥–∞")
async def show_delete(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id

    await state.clear()

    try: dishes = users[uid]['custom_dishes']

    except KeyError:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞.")
        return

    if not dishes or len(dishes) == 0:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª—é–¥.")
        return

    await state.clear()

    await state.update_data(dishes=dishes, page=0, selected=[])

    kb = delete_menu(dishes, page=0, selected=[])
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:", reply_markup=kb)

    await state.set_state(FSMDeleteState.deleting)

# –í—ã–±–æ—Ä –±–ª—é–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(lambda c: c.data and c.data.startswith("delete_toggle:") , FSMDeleteState.deleting)
async def toggle_delete(callback: CallbackQuery, state: FSMContext):
    if callback.data is None:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback")
        return

    data = await state.get_data()
    dishes, sel, page = data.get("dishes"), data.get("selected"), data.get("page")
    _, idx_str, _ = callback.data.split(":")
    idx = int(idx_str)
    dish = dishes[idx] #type: ignore

    if dish in sel: #type: ignore
        sel.remove(dish) #type: ignore
    else:
        sel.append(dish) #type: ignore

    await state.update_data(selected=sel)

    kb = delete_menu(dishes, page, sel) #type: ignore
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:", reply_markup=kb)

    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("page:"), FSMDeleteState.deleting)
async def change_delete_page(callback: CallbackQuery, state: FSMContext):

    if callback.data is None:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback")
        return

    data = await state.get_data()
    dishes, sel = data['dishes'], data['selected']
    page = int(callback.data.split(":")[1])
    await state.update_data(page=page)
    kb = delete_menu(dishes, page, sel)
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "delete_confirm", FSMDeleteState.deleting)
async def confirm_delete(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    data = await state.get_data()
    selected = data['selected']

    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞ –∏–∑ users
    remaining = [d for d in users[uid]['custom_dishes'] if d not in selected]
    users[uid]['custom_dishes'] = remaining

    # –û—á–∏—â–∞–µ–º FSM
    await state.clear()

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    names = [d['name'] for d in selected]
    text = (
        f"–£–¥–∞–ª–µ–Ω–æ –±–ª—é–¥: {len(selected)}\n"
        f"–°–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö: {', '.join(names)}"
    )
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text(text=text, reply_markup=return_select())
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# –†–∞—Ü–∏–æ–Ω –¥–Ω—è

@router.callback_query(F.data == "‚åõ–†–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å")
async def show_today(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id

    try: dishes = users[uid]['custom_dishes']

    except KeyError:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–ª—é–¥–∞.")
        return

    if not dishes or len(dishes) == 0:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª—é–¥.")
        return

    await state.clear()

    await state.update_data(dishes=dishes, page=0, selected=[])

    kb = make_menu(dishes, page=0, selected=[])
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=kb)

    await state.set_state(FSMDietState.selecting)


@router.callback_query(lambda c: c.data and c.data.startswith("toggle:") , FSMDietState.selecting)
async def toggle_dish(callback: CallbackQuery, state: FSMContext):
    if callback.data is None:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback")
        return

    data = await state.get_data()
    dishes, sel, page = data.get("dishes"), data.get("selected"), data.get("page")
    _, idx_str, _ = callback.data.split(":")
    idx = int(idx_str)
    dish = dishes[idx] #type: ignore

    if dish in sel: #type: ignore
        sel.remove(dish) #type: ignore
    else:
        sel.append(dish) #type: ignore

    await state.update_data(selected=sel)
    kb = make_menu(dishes, page, sel) #type: ignore
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=kb)

    await callback.answer()

@router.callback_query(lambda c: c.data and c.data.startswith("page:"), FSMDietState.selecting)
async def change_page(callback: CallbackQuery, state: FSMContext):

    if callback.data is None:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback")
        return

    data = await state.get_data()
    dishes, sel = data['dishes'], data['selected']
    page = int(callback.data.split(":")[1])
    await state.update_data(page=page)
    kb = make_menu(dishes, page, sel)
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data == "confirm", FSMDietState.selecting)
async def confirm_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sel = data['selected']

    total_c = sum(float(d['carbs']) for d in sel)
    total_p = sum(float(d['protein']) for d in sel)
    total_f = sum(float(d['fats']) for d in sel)
    calories = total_c*4 + total_p*4 + total_f*9

    text = (
        f"üìã *–í–∞—à —Ä–∞—Ü–∏–æ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
        f"‚Äì –ë–ª—é–¥ –≤—ã–±—Ä–∞–Ω–æ: {len(sel)}\n"
        f"‚Äì –£–≥–ª–µ–≤–æ–¥—ã: {total_c:.0f}‚ÄØ–≥—Ä–∞–º–º\n"
        f"‚Äì –ë–µ–ª–∫–∏: {total_p:.0f}‚ÄØ–≥—Ä–∞–º–º\n"
        f"‚Äì –ñ–∏—Ä—ã: {total_f:.0f}‚ÄØ–≥—Ä–∞–º–º\n"
        f"‚Äì –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f}‚ÄØ–∫–∫–∞–ª"
    )
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text(text, parse_mode="Markdown")

    try:
        tdee = float(users[callback.from_user.id]['user_info']["tdee"])
    except KeyError:
        await callback.message.answer(text="–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π.\n–ß—Ç–æ–±—ã –µ—ë —É–∫–∞–∑–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=return_select()) #type: ignore
        return
    if calories > tdee + 200:
        text1 = "–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —Å–≤–æ—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π!\n"
    elif calories < tdee - 200:
        text1 = "–í—ã –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π!\n"
    else:
        text1 = "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π!\n"
    text2 = "–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: " + str(tdee) + " –∫–∫–∞–ª\n\n"

    tdee_carbs = tdee * 0.45
    tdee_protein = tdee * 0.3
    tdee_fats = tdee * 0.25

    if total_c * 4 > tdee_carbs + 100:
        text3 = "üçû –£–≥–ª–µ–≤–æ–¥—ã –ø—Ä–µ–≤—ã—à–µ–Ω—ã! –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ö–ª–µ–±, –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å –∏ —Å–ª–∞–¥–æ—Å—Ç–∏ –≤ —Ä–∞—Ü–∏–æ–Ω–µ.\n\n"
    elif total_c * 4 < tdee_carbs - 150:
        text3 = "‚ö°Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —É–≥–ª–µ–≤–æ–¥–æ–≤! –î–æ–±–∞–≤—å—Ç–µ –≤ –º–µ–Ω—é –±–æ–ª—å—à–µ –∫—Ä—É–ø, –º–∞–∫–∞—Ä–æ–Ω –∏ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ö–ª–µ–±–∞.\n\n"
    else:
        text3 = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å—É—Ç–æ—á–Ω–æ–π –Ω–æ—Ä–º—ã —É–≥–ª–µ–≤–æ–¥–æ–≤.\n\n"

    if total_p * 4 > tdee_protein + 250:
        text4 = "ü•© –ò–∑–±—ã—Ç–æ–∫ –±–µ–ª–∫–∞! –£–º–µ–Ω—å—à–∏—Ç–µ –ø–æ—Ä—Ü–∏–∏ –º—è—Å–∞, —Ä—ã–±—ã –∏ –º–æ–ª–æ—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n"
    elif total_p * 4 < tdee_protein - 100:
        text4 = "üí™ –ë–µ–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –í–∫–ª—é—á–∏—Ç–µ –≤ —Ä–∞—Ü–∏–æ–Ω –±–æ–ª—å—à–µ –º—è—Å–∞, —Ä—ã–±—ã, –º–æ–ª–æ–∫–∞ –∏–ª–∏ —è–∏—Ü.\n\n"
    else:
        text4 = "üëç –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–ø–∞–¥–∞–µ—Ç–µ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—É—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –±–µ–ª–∫–∞.\n\n"

    if total_f * 9 > tdee_fats + 100:
        text5 = "ü•ú –ñ–∏—Ä–æ–≤ –º–Ω–æ–≥–æ–≤–∞—Ç–æ! –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –º–∞—Å–ª–∞, –æ—Ä–µ—Ö–∏ –∏ –∂–∏—Ä–Ω–æ–µ –º—è—Å–æ –≤ —Å–≤–æ—ë–º —Ä–∞—Ü–∏–æ–Ω–µ.\n\n"
    elif total_f * 9 < tdee_fats - 100:
        text5 = "ü•ë –ñ–∏—Ä–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî –¥–æ–±–∞–≤—å—Ç–µ –æ—Ä–µ—Ö–∏, –∞–≤–æ–∫–∞–¥–æ –∏–ª–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å–ª–∞.\n\n"
    else:
        text5 = "üéâ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ñ–∏—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã.\n\n"

    final_text = text1 + text2 + text3 + text4 + text5
    await callback.message.answer(text=final_text, reply_markup=return_select()) #type: ignore

    # –æ—á–∏—â–∞–µ–º FSM –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await state.clear()


@router.callback_query(F.data.in_(["dish_no_callback", "ü•ó–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–∞"]))
async def new_dish_callback(callback: CallbackQuery, state: FSMContext):
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–≥—Ä–∞–º–º) –≤ –≤–∞—à–µ–º –±–ª—é–¥–µ.')
        await state.clear()
        await state.set_state(FSMFillDish.dish_carbs)
    else:
        await callback.answer()


@router.callback_query(F.data.in_(["user_no_callback", "üëÄ–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]), user_exists)
async def reuser_callback(callback: CallbackQuery, state: FSMContext):
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):
        await callback.message.edit_text('–í—ã —Ä–µ—à–∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.')
        await state.clear()
        await state.set_state(FSMFillUser.user_age)

    else:
        await callback.answer()


@router.callback_query(F.data == "dish_yes_callback", StateFilter(FSMFillDish.end), user_exists)
async def dish_menu_callback(callback: CallbackQuery, state: FSMContext):
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):

        user_id = callback.from_user.id

        data = await state.get_data()
        dish_data = cast(DishData, data)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        users[user_id]['custom_dishes'].append(dish_data)

        await state.clear()

        logging.info(users[callback.from_user.id])
        await callback.message.edit_text('–≠—Ç–æ –º–µ–Ω—é. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:', reply_markup=start_menu())

    await callback.answer("–ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

@router.callback_query(F.data == "user_yes_callback", StateFilter(FSMFillUser.end), user_exists)
async def user_menu_callback(callback: CallbackQuery, state: FSMContext):
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):

        user_id = callback.from_user.id

        user_data = await state.get_data()
        info_data = cast(UserInfoData, user_data)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        users[user_id]['user_info'] = info_data

        new_age = user_data.get('age', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        new_weight = user_data.get('weight', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        new_height = user_data.get('height', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        new_gender = user_data.get('gender', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        new_activity = user_data.get('activity', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        await add_user_info(user_id, new_age, new_weight, new_height, new_gender, new_activity)

        await state.clear()

        logging.info(users[callback.from_user.id])
        await callback.message.edit_text('–≠—Ç–æ –º–µ–Ω—é. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:', reply_markup=start_menu())

    await callback.answer("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")