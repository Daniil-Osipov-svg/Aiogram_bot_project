from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery
from keyboards.main_menu import start_menu, yes_or_no_user, gender_select, activity_select
import logging

from .callback_handlers import FSMFillUser
from aiogram.fsm.context import FSMContext

#–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
from database.requests import set_user

router = Router()




@router.message(Command(commands=['start']))
async def start_command(message: Message):
    if message.from_user is not None:
        await set_user(message.from_user.id, message.from_user.first_name, message.from_user.last_name)
        await message.answer('–ü—Ä–∏–≤–µ—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç TunWheel!')
        await message.answer('–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥—Å—á—ë—Ç—É –∫–∞–ª–æ—Ä–∏–π.\n'
                            '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∏—á—å —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π!')
        await message.answer('–ù–∞–∂–º–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é!')
        await message.answer('–ù–∞–∂–º–∏—Ç–µ /menu, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–æ—Å—å –º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏!')

        logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.')
    else:
        await message.answer('–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!')
        return

@router.message(Command(commands=['menu']))
async def menu_command(message: Message):
    await message.answer(text = '–≠—Ç–æ –º–µ–Ω—é. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∏–∂–µ:', reply_markup=start_menu())

@router.message(Command(commands=['help']))
async def help_command(message: Message):
    await message.answer('–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –∫–∞–ª–æ—Ä–∏–π.\n'
                        '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–¥—Å—á—ë—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∞—Ü–∏–æ–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è.\n'
                        '–ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!')


@router.message(F.text, StateFilter(FSMFillUser.user_age))
async def desc_user_age(message: Message, state: FSMContext):
    if message.text is not None and message.text.isdigit():

        await state.update_data(age = message.text)

        await message.bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id - 1) #type: ignore
        await message.delete()
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–µ—Å.')

        await state.set_state(FSMFillUser.user_weight)

    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')

@router.message(F.text, StateFilter(FSMFillUser.user_weight))
async def desc_user_weight(message: Message, state: FSMContext):
    if message.text is not None and message.text.isdigit():

        await state.update_data(weight = message.text)

        await message.bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id - 1) #type: ignore
        await message.delete()
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç.')

        await state.set_state(FSMFillUser.user_height)

    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')

@router.message(F.text, StateFilter(FSMFillUser.user_height))
async def desc_user_height(message: Message, state: FSMContext):
    if message.text is not None and message.text.isdigit():

        await state.update_data(height = message.text)

        await message.bot.delete_message(chat_id = message.from_user.id, message_id = message.message_id - 1) #type: ignore
        await message.delete()
        await message.answer(text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª.', reply_markup = gender_select())

        await state.set_state(FSMFillUser.user_gender)

    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')

@router.callback_query(StateFilter(FSMFillUser.user_gender))
async def desc_user_gender(callback: CallbackQuery, state: FSMContext):
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):

        await state.update_data(gender = callback.data)

        await callback.message.edit_text(text = '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Å—Ä–µ–¥–Ω—é—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.', reply_markup = activity_select())

        await state.set_state(FSMFillUser.user_activity)

    else:
        await callback.answer()

@router.callback_query(StateFilter(FSMFillUser.user_activity))
async def desc_user_activity(callback: CallbackQuery, state: FSMContext):
    if (callback.message is not None) and (hasattr(callback.message, 'edit_text')):

        await state.update_data(activity = callback.data)
        data = await state.get_data()

        new_user_age = data.get('age', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        new_user_weight = data.get('weight', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        new_user_height = data.get('height', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        new_user_gender = data.get('gender', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        new_user_activity = data.get('activity', "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

        if new_user_activity == '‚ö°‚ö°‚ö° –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ö°‚ö°‚ö°':
            new_user_activity = 'üî¥–í—ã—Å–æ–∫–∏–πüî¥'
        elif new_user_activity == '‚ö°‚ö° –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ö°‚ö°':
            new_user_activity = 'üü°–°—Ä–µ–¥–Ω–∏–πüü°'
        elif new_user_activity == '‚ö° –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚ö°':
            new_user_activity = 'üü¢–ù–∏–∑–∫–∏–πüü¢'


        await callback.message.edit_text(f'–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {new_user_age}.\n'
                                    f'–í–∞—à –≤–µ—Å: {new_user_weight}.\n'
                                    f'–í–∞—à —Ä–æ—Å—Ç: {new_user_height}.\n'
                                    f'–í–∞—à –ø–æ–ª: {new_user_gender}.\n'
                                    f'–í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {new_user_activity}.\n'
                                    '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞—Ü–∏–æ–Ω –ø–∏—Ç–∞–Ω–∏—è!\n\n'
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n–ò–ª–∏ –û—Ç–º–µ–Ω–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥–∫–æ—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ.",
                    reply_markup=yes_or_no_user())


        await state.set_state(FSMFillUser.end)